import omni.ext
import omni.ui as ui
import omni.kit.commands # New
import omni.usd # New
from typing import List # New

def get_selection() -> List[str]:
    """取得目前選中的 Prim 路徑列表"""
    return omni.usd.get_context().get_selection().get_selected_prim_paths()

class MyExtension(omni.ext.IExt):
    def on_startup(self, ext_id):
        print("[omni.example.scale_increment] Extension started")

        self._window = ui.Window("Scale Increment", width=300, height=150)
        with self._window.frame:
            with ui.VStack():
                ui.Button("Increase Scale", clicked_fn=lambda: self.run_scale_increment())

    def run_scale_increment(self):
        selected_prims = get_selection()
        if selected_prims:
            omni.kit.commands.execute('ScaleIncrement', prim_paths=selected_prims)

    def on_shutdown(self):
        print("[omni.example.scale_increment] Extension stopped")
        
class ScaleIncrement(omni.kit.commands.Command):
    def __init__(self, prim_paths: List[str]):
        self.prim_paths = prim_paths  # ✅ 支援多個物件
        self.stage = omni.usd.get_context().get_stage()

    def set_scale(self, undo: bool = False):
        for path in self.prim_paths:
            prim = self.stage.GetPrimAtPath(path)
            scale_attr = prim.GetAttribute('xformOp:scale')
            old_scale = scale_attr.Get()
            new_scale = tuple(x + 1 for x in old_scale) if not undo else tuple(x - 1 for x in old_scale)
            scale_attr.Set(new_scale)

    def do(self):
        self.set_scale()
        return [self.stage.GetPrimAtPath(path).GetAttribute('xformOp:scale').Get() for path in self.prim_paths]

    def undo(self):
        self.set_scale(True)
